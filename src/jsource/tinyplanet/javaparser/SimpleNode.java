/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

// History:
//	8/2/2001 lmm	- add elses to shorten comparison time once one is found
//			- add and comment out debug printing

package com.tinyplanet.javaparser;
import java.util.Vector;
public class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected JavaParser parser;
  public Token  first_token;
  public Token  last_token;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(JavaParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
/*  public Object jjtAccept(javaparserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }  */

  /** Accept the visitor. **/
/*  public Object childrenAccept(javaparserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }       */

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    String output = "";
    output += first_token.image;
    output += "                        Position " + first_token.beginLine + ", "+
       first_token.beginColumn +", "+ first_token.endLine+", "+
       first_token.endColumn;
    return output;
  }
  public String toString(String prefix) {
    String output = "";
    if (first_token.specialToken != null) {
      output += first_token.specialToken + "\n\t\t\t\t";
    }
    output += prefix+toString() ;
    return output;
   }

//  private static int dumpLevel = 0;
  
  public void dump(String prefix) 
  {
//	System.out.println("SimpleNode.dump: entry level = " + dumpLevel);
//  	dumpLevel++;
	String output = "";

	output += JavaParserTreeConstants.jjtNodeName[id];
	System.out.println(prefix+output+ "\t\t\t"  + toString(""));
	if (children != null) {
//		System.out.print("    has " + children.length + " children");
		for (int i = 0; i < children.length; ++i) {
//			System.out.print(" " + i);
			SimpleNode n = (SimpleNode)children[i];
			if (n != null) {
//				System.out.println("");
				n.dump(prefix + "-");
//			System.out.print("finish child " + i);
			}
//			else  {
//				System.out.print(" (null)");
//			}
      	}
//		System.out.println("");
	}
	else  {
//		System.out.println("Has no children");
	}
//  	dumpLevel--;
//	System.out.println("SimpleNode.dump: exit  level = " + dumpLevel);
  }
 

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void summaryDump(String prefix) {
    String output = "";

    if (   //JavaParserTreeConstants.jjtNodeName[id].equals("ClassBodyDeclaration")
              JavaParserTreeConstants.jjtNodeName[id].equals("ClassDeclaration")
        || JavaParserTreeConstants.jjtNodeName[id].equals("MethodDeclaration")
        || JavaParserTreeConstants.jjtNodeName[id].equals("MethodDeclarator")
        || JavaParserTreeConstants.jjtNodeName[id].equals("FormalParameters")
        || JavaParserTreeConstants.jjtNodeName[id].equals("FormalParameter")
        || JavaParserTreeConstants.jjtNodeName[id].equals("ConstructorDeclaration")
        || JavaParserTreeConstants.jjtNodeName[id].equals("ExplicitConstructorInvocation")
        || JavaParserTreeConstants.jjtNodeName[id].equals("FieldDeclaration")
         || JavaParserTreeConstants.jjtNodeName[id].equals("VariableDeclarator")
         || JavaParserTreeConstants.jjtNodeName[id].equals("VariableDeclaratorId")

        ){
      output += JavaParserTreeConstants.jjtNodeName[id];
      System.out.println(output+ "\t\t\t"  + toString(""));
    }

    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.summaryDump(prefix + "--");
	}
      }
    }
  }

  public Vector getSummaryInfo() {
    Vector v = new Vector();
    addSummary(v);
    return v;
  }

  void addSummary(Vector v) 
  {
//	System.out.println("SimpleNode.addSummary: entry level = " + dumpLevel);
//  	dumpLevel++;
   if (JavaParserTreeConstants.jjtNodeName[id].equals("ClassDeclaration") ) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " add Class");
     com.tinyplanet.docwiz.Class c  = new com.tinyplanet.docwiz.Class(this);
     v.addElement(c);
   }
   else if (JavaParserTreeConstants.jjtNodeName[id].equals("InterfaceDeclaration") ) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " add Interface");
     com.tinyplanet.docwiz.Interface c  = new com.tinyplanet.docwiz.Interface(this);
     v.addElement(c);
   }
   else if (JavaParserTreeConstants.jjtNodeName[id].equals("MethodDeclaration")) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " add Method");
     com.tinyplanet.docwiz.Method c  = new com.tinyplanet.docwiz.Method(this);
     v.addElement(c);
   }
   else if (JavaParserTreeConstants.jjtNodeName[id].equals("ConstructorDeclaration")) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " add Constructor");
     com.tinyplanet.docwiz.Constructor c  = new com.tinyplanet.docwiz.Constructor(this);
     v.addElement(c);
   }
   else if (JavaParserTreeConstants.jjtNodeName[id].equals("FieldDeclaration")) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " add Field");
     com.tinyplanet.docwiz.Field c  = new com.tinyplanet.docwiz.Field(this);
     v.addElement(c);
   }
   if (children != null) {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " children = " + children.length);
     for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.addSummary(v);
        }
      }
    }
//	else  {
//	System.out.println("SimpleNode.addSummary:       level = " + dumpLevel + " children = null");
//	}
//  	dumpLevel--;
//	System.out.println("SimpleNode.addSummary: exit  level = " + dumpLevel);
  }

}
